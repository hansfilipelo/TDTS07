<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

bool req[2][2] = {{false, false}, {false, false}};

broadcast chan ack_on[2];
broadcast chan ack_off[2];

chan s_on[4];
</declaration>
	<template>
		<name x="5" y="5">TL</name>
		<parameter>const int id</parameter>
		<declaration>// Place local declarations here.
bool light = false;
bool acked = false;

</declaration>
		<location id="id0" x="-791" y="-366">
			<name x="-808" y="-357">green</name>
		</location>
		<location id="id1" x="-527" y="-518">
			<name x="-535" y="-501">unhandled_vehicle</name>
		</location>
		<location id="id2" x="-1071" y="-518">
			<name x="-1088" y="-501">wait</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-807" y="-476">acked</label>
			<label kind="synchronisation" x="-807" y="-493">s_on[id]?</label>
			<label kind="assignment" x="-807" y="-459">light = true</label>
			<nail x="-824" y="-476"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1198" y="-586">ack_off[id/2]?</label>
			<label kind="assignment" x="-1198" y="-569">acked = false</label>
			<nail x="-1096" y="-561"/>
			<nail x="-1113" y="-544"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1062" y="-603">ack_on[id/2]?</label>
			<label kind="assignment" x="-1062" y="-586">acked = true</label>
			<nail x="-1045" y="-561"/>
			<nail x="-1071" y="-569"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1028" y="-433">ack_off[id/2]?</label>
			<label kind="assignment" x="-1028" y="-416">light = false,
acked = false</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-663" y="-433">ack_on[id/2]?</label>
			<label kind="assignment" x="-663" y="-416">light = true,
req[id/2][id%2] = false</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-943" y="-544">not acked</label>
			<label kind="synchronisation" x="-943" y="-561">s_on[id]?</label>
			<label kind="assignment" x="-824" y="-544">req[id/2][id%2] = true</label>
		</transition>
	</template>
	<template>
		<name>Sensor</name>
		<parameter>const int id</parameter>
		<location id="id3" x="-3085" y="-2465">
			<name x="-3110" y="-2508">SensorOn</name>
		</location>
		<location id="id4" x="-3221" y="-2465">
			<name x="-3255" y="-2499">SensorOff</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<nail x="-3153" y="-2431"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-3187" y="-2524">s_on[id]!</label>
			<nail x="-3153" y="-2499"/>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<declaration>const int time_limit = 20;

clock time;</declaration>
		<location id="id5" x="-366" y="34">
		</location>
		<location id="id6" x="-366" y="-119">
		</location>
		<location id="id7" x="-664" y="-60">
			<name x="-825" y="-93">AckNS</name>
			<label kind="invariant" x="-825" y="-77">time &lt; time_limit + 1</label>
		</location>
		<location id="id8" x="-52" y="-60">
			<name x="-35" y="-93">AckWE</name>
			<label kind="invariant" x="-35" y="-77">time &lt; time_limit + 1</label>
		</location>
		<location id="id9" x="-365" y="-365">
			<name x="-383" y="-399">NoAck</name>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="guard" x="0" y="-17">(req[1][0] or req[1][1])
and not (req[0][0] or req[0][1])
and time &gt; time_limit</label>
			<label kind="assignment" x="0" y="34">time = 0</label>
			<nail x="8" y="-34"/>
			<nail x="-17" y="-8"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-892" y="-25">(req[0][0] or req[0][1])
and not (req[1][0] or req[1][1])
and time &gt; time_limit</label>
			<label kind="assignment" x="-892" y="25">time = 0</label>
			<nail x="-722" y="-34"/>
			<nail x="-697" y="-8"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-562" y="0">ack_on[0]!</label>
			<label kind="assignment" x="-562" y="17">time = 0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="-230" y="8">(req[0][0] or req[0][1])
and time &gt; time_limit</label>
			<label kind="synchronisation" x="-230" y="42">ack_off[1]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-264" y="-136">ack_on[1]!</label>
			<label kind="assignment" x="-264" y="-119">time = 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-562" y="-161">(req[1][0] or req[1][1])
and time &gt; time_limit</label>
			<label kind="synchronisation" x="-561" y="-127">ack_off[0]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-263" y="-425">not(req[0][0] or req[0][1] or req[1][0] or req[1][1])
and time &gt; time_limit</label>
			<label kind="synchronisation" x="-263" y="-391">ack_off[1]!</label>
			<nail x="-52" y="-365"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="guard" x="-757" y="-416">not(req[0][0] or req[0][1] or req[1][0] or req[1][1])
and time &gt; time_limit</label>
			<label kind="synchronisation" x="-757" y="-382">ack_off[0]!</label>
			<nail x="-664" y="-365"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-264" y="-323">req[1][0] or req[1][1]</label>
			<label kind="synchronisation" x="-264" y="-306">ack_on[1]!</label>
			<label kind="assignment" x="-264" y="-289">time = 0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-579" y="-323">req[0][0] or req[0][1]</label>
			<label kind="synchronisation" x="-579" y="-306">ack_on[0]!</label>
			<label kind="assignment" x="-579" y="-289">time = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
TL0 = TL(0);
TL1 = TL(1);
TL2 = TL(2);
TL3 = TL(3);
S0 = Sensor(0);
S1 = Sensor(1);
S2 = Sensor(2);
S3 = Sensor(3);
// List one or more processes to be composed into a system.
system TL0, TL1, TL2, TL3, Controller, S0, S1, S2, S3;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>The system can not deadlock
			</comment>
		</query>
		<query>
			<formula>A[] not ((TL0.green or TL1.green) and (TL2.green or TL3.green))
			</formula>
			<comment>lights on perpendicular directions must not simultaneously be green.
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; TL0.unhandled_vehicle imply TL0.green
			</formula>
			<comment>if a vehicle arrives at the crossing (as detected by the respective sensor),
it will eventually be granted green light
			</comment>
		</query>
	</queries>
</nta>
